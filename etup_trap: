%line 3+1 util.inc

[extern exit]
[extern string_length]
[extern print_string]
[extern print_char]
[extern print_newline]
[extern print_uint]
[extern print_int]
[extern string_equals]
[extern read_char]
[extern read_word]
[extern parse_uint]
[extern parse_int]
[extern string_copy]

%line 2+1 interpreter.asm

[global _start]

%line 8+1 interpreter.asm

[section .text]

%line 3+1 macro.inc



%line 17+1 macro.inc

%line 21+1 macro.inc

%line 3+1 core-functions.asm

[section .data]
%line 4+0 core-functions.asm
 w_drop: dq 0
 db "drop", 0

 xt_drop: dq drop_impl

[section .text]
 drop_impl:
%line 5+1 core-functions.asm
[section .data]
%line 5+0 core-functions.asm
 w_swap: dq w_drop
 db "swap", 0

 xt_swap: dq swap_impl

[section .text]
 swap_impl:
%line 6+1 core-functions.asm
[section .data]
%line 6+0 core-functions.asm
 w_rot: dq w_swap
 db "rot", 0

 xt_rot: dq rot_impl

[section .text]
 rot_impl:
%line 7+1 core-functions.asm
[section .data]
%line 7+0 core-functions.asm
 w_dup: dq w_rot
 db "dup", 0

 xt_dup: dq dup_impl

[section .text]
 dup_impl:
%line 8+1 core-functions.asm
[section .data]
%line 8+0 core-functions.asm
 w_not: dq w_dup
 db "not", 0

 xt_not: dq not_impl

[section .text]
 not_impl:
%line 9+1 core-functions.asm
[section .data]
%line 9+0 core-functions.asm
 w_and: dq w_not
 db "and", 0

 xt_and: dq and_impl

[section .text]
 and_impl:
%line 10+1 core-functions.asm
[section .data]
%line 10+0 core-functions.asm
 w_or: dq w_and
 db "or", 0

 xt_or: dq or_impl

[section .text]
 or_impl:
%line 11+1 core-functions.asm
[section .data]
%line 11+0 core-functions.asm
 w_land: dq w_or
 db "land", 0

 xt_land: dq land_impl

[section .text]
 land_impl:
%line 12+1 core-functions.asm
[section .data]
%line 12+0 core-functions.asm
 w_lor: dq w_land
 db "lor", 0

 xt_lor: dq lor_impl

[section .text]
 lor_impl:
%line 13+1 core-functions.asm

[section .data]
%line 14+0 core-functions.asm
 w_show: dq w_lor
 db ".S", 0

 xt_show: dq show_impl

[section .text]
 show_impl:
%line 15+1 core-functions.asm
[section .data]
%line 15+0 core-functions.asm
 w_exit: dq w_show
 db "exit", 0

 xt_exit: dq exit_impl

[section .text]
 exit_impl:
%line 16+1 core-functions.asm
[section .data]
%line 16+0 core-functions.asm
 w_to_ret: dq w_exit
 db ">r", 0

 xt_to_ret: dq to_ret_impl

[section .text]
 to_ret_impl:
%line 17+1 core-functions.asm
[section .data]
%line 17+0 core-functions.asm
 w_from_ret: dq w_to_ret
 db "r>", 0

 xt_from_ret: dq from_ret_impl

[section .text]
 from_ret_impl:
%line 18+1 core-functions.asm
[section .data]
%line 18+0 core-functions.asm
 w_r_fetch: dq w_from_ret
 db "r@", 0

 xt_r_fetch: dq r_fetch_impl

[section .text]
 r_fetch_impl:
%line 19+1 core-functions.asm
[section .data]
%line 19+0 core-functions.asm
 w_emit: dq w_r_fetch
 db "emit", 0

 xt_emit: dq emit_impl

[section .text]
 emit_impl:
%line 20+1 core-functions.asm
[section .data]
%line 20+0 core-functions.asm
 w_word: dq w_emit
 db "word", 0

 xt_word: dq word_impl

[section .text]
 word_impl:
%line 21+1 core-functions.asm
[section .data]
%line 21+0 core-functions.asm
 w_number: dq w_word
 db "number", 0

 xt_number: dq number_impl

[section .text]
 number_impl:
%line 22+1 core-functions.asm
[section .data]
%line 22+0 core-functions.asm
 w_branch: dq w_number
 db "branch", 0

 xt_branch: dq branch_impl

[section .text]
 branch_impl:
%line 23+1 core-functions.asm
[section .data]
%line 23+0 core-functions.asm
 w_branch0: dq w_branch
 db "branch0", 0

 xt_branch0: dq branch0_impl

[section .text]
 branch0_impl:
%line 24+1 core-functions.asm
[section .data]
%line 24+0 core-functions.asm
 w_fetch: dq w_branch0
 db "@", 0

 xt_fetch: dq fetch_impl

[section .text]
 fetch_impl:
%line 25+1 core-functions.asm
[section .data]
%line 25+0 core-functions.asm
 w_write: dq w_fetch
 db "!", 0

 xt_write: dq write_impl

[section .text]
 write_impl:
%line 26+1 core-functions.asm
[section .data]
%line 26+0 core-functions.asm
 w_write_char: dq w_write
 db "c!", 0

 xt_write_char: dq write_char_impl

[section .text]
 write_char_impl:
%line 27+1 core-functions.asm
[section .data]
%line 27+0 core-functions.asm
 w_plus: dq w_write_char
 db "+", 0

 xt_plus: dq plus_impl

[section .text]
 plus_impl:
%line 28+1 core-functions.asm
[section .data]
%line 28+0 core-functions.asm
 w_minus: dq w_plus
 db "-", 0

 xt_minus: dq minus_impl

[section .text]
 minus_impl:
%line 29+1 core-functions.asm
[section .data]
%line 29+0 core-functions.asm
 w_multiply: dq w_minus
 db "*", 0

 xt_multiply: dq multiply_impl

[section .text]
 multiply_impl:
%line 30+1 core-functions.asm
[section .data]
%line 30+0 core-functions.asm
 w_divide: dq w_multiply
 db "/", 0

 xt_divide: dq divide_impl

[section .text]
 divide_impl:
%line 31+1 core-functions.asm
[section .data]
%line 31+0 core-functions.asm
 w_mod: dq w_divide
 db "%", 0

 xt_mod: dq mod_impl

[section .text]
 mod_impl:
%line 32+1 core-functions.asm
[section .data]
%line 32+0 core-functions.asm
 w_equals: dq w_mod
 db "=", 0

 xt_equals: dq equals_impl

[section .text]
 equals_impl:
%line 33+1 core-functions.asm
[section .data]
%line 33+0 core-functions.asm
 w_lt: dq w_equals
 db "<", 0

 xt_lt: dq lt_impl

[section .text]
 lt_impl:
%line 34+1 core-functions.asm
[section .data]
%line 34+0 core-functions.asm
 w_gt: dq w_lt
 db ">", 0

 xt_gt: dq gt_impl

[section .text]
 gt_impl:
%line 35+1 core-functions.asm

[section .data]
%line 36+0 core-functions.asm
 w_dot: dq w_gt
 db ".", 0

 xt_dot: dq dot_impl

[section .text]
 dot_impl:
%line 37+1 core-functions.asm
 pop rdi
 call print_int
 jmp next

[section .data]
%line 41+0 core-functions.asm
 w_find_word: dq w_dot
 db "find_word", 0

 xt_find_word: dq find_word_impl

[section .text]
 find_word_impl:
%line 42+1 core-functions.asm
 call find_word_func
 jmp next

[section .data]
%line 45+0 core-functions.asm
 w_cfa: dq w_find_word
 db "cfa", 0

 xt_cfa: dq cfa_impl

[section .text]
 cfa_impl:
%line 46+1 core-functions.asm
 call cfa_func
 jmp next

[section .data]
%line 49+0 core-functions.asm
 w_bye: dq w_cfa
 db "bye", 0

 xt_bye: dq bye_impl

[section .text]
 bye_impl:
%line 50+1 core-functions.asm
 call exit



 find_word_func:
 .loop:
 push rdi
 lea rdi, [rdi + 8]
 call string_equals
 pop rdi
 cmp rax, 0
 je .find
 mov rdi, [rdi]
 cmp rdi, 0
 je .fail
 jmp .loop
 .find:
 mov rax, rdi
 ret
 .fail:
 mov rax, 0
 ret

 cfa_func:
 lea rdi, [rdi + 8]
 push rdi
 call string_length
 pop rdi
 lea rax, [rdi + rax + 1]
 ret

%line 12+1 interpreter.asm

[section .data]

not_found: db "Unknown command", 10, 0
program_stub: dq 0
xt_interpreter: dq .interpreter
.interpreter: dq interpreter_loop

[section .bss]

resq 1023
rstack_start: resq 1
input_buf: resb 1024

[section .text]

_start:
 mov r13, rstack_start
 mov r15, xt_interpreter
 jmp next

next:
 mov r14, r15
 add r15, 8
 mov r14, [r14]
 jmp [r14]

interpreter_loop:
 mov rdi, input_buf
 mov rsi, 1024
 call read_word
 mov rsi, rax
 mov rdi, w_bye
 push rsi
 call find_word_func
 pop rsi
 cmp rax, 0
 je .not_found
 mov rdi, rax
 call cfa_func
 mov [program_stub], rax
 mov r15, program_stub
 jmp next
.not_found:
 mov rdi, rsi
 push rdi
 call string_length
 pop rdi
 cmp rax, 0
 je .return_noprint
 push rax
 call parse_int
 pop rax
 cmp rdx, rax
 jne .return
 push rax
 jmp .return_noprint
.return:
 mov r15, xt_interpreter
 mov rdi, not_found
 call print_string
 jmp next
.return_noprint:
 mov r15, xt_interpreter
 jmp next
